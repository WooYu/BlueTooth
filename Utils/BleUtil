package com.autel.hems.utils

import android.Manifest
import android.app.Activity
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.text.TextUtils
import androidx.activity.ComponentActivity
import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultCallback
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.core.app.ActivityCompat
import com.autel.basewidget.dialog.CommonDialog
import com.autel.basewidget.utils.PermissionPageUtils
import com.autel.component.R
import com.autel.component.utils.SdkUtils
import com.autel.log.Log
import com.autel.tool.ApActivityTool
import com.tbruyelle.rxpermissions2.RxPermissions
import io.reactivex.disposables.Disposable
import java.lang.ref.WeakReference


/**
 * 蓝牙开关状态判断、蓝牙权限申请工具类
 */
class HemsBleUtil {
    private val logTag = HemsConstant.TAG_HEMS_BLE

    /**
     * 跳转设置-打开蓝牙开关
     */
    private val requestCodeOfTurnOnBluetoothSwitch = 0x001

    /**
     * 跳转设置-应用-打开蓝牙权限
     */
    private val requestCodeOfApplyPermission = 0x002

    private var activityReference: WeakReference<ComponentActivity>? = null
    private var bleLauncher: ActivityResultLauncher<Intent>? = null

    /**
     * ActivityForResult
     */
    private var requestCode = -1

    /**
     * 蓝牙状态预检结果回调
     */
    var preCheckCallbackOfBluetoothStatus: ((Boolean) -> Unit)? = null

    /**
     * 蓝牙开关状态变化的回调
     */
    var bluetoothSwitchChangeCallback: ((Boolean) -> Unit)? = null

    /**
     * 权限申请弹窗
     */
    private var applyPermissionDialog: CommonDialog? = null

    private var rxPermissions: RxPermissions? = null
    private var disposableOfPermissions: Disposable? = null

    private var mBluetoothAdapter: BluetoothAdapter? = null

    private val mBluetoothMonitorReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            val action = intent?.action
            Log.iF(logTag, "mBluetoothMonitorReceiver -> action = $action")
            if (TextUtils.isEmpty(action)) {
                return
            }
            if (TextUtils.equals(action, BluetoothAdapter.ACTION_STATE_CHANGED)) {
                val blueState = intent!!.getIntExtra(BluetoothAdapter.EXTRA_STATE, 0)
                Log.iF(logTag, "mBluetoothMonitorReceiver -> blueState = $blueState")
                if (blueState == BluetoothAdapter.STATE_ON) {
                    Log.iF(logTag, "mBluetoothMonitorReceiver -> bluetooth is on.")
                    bluetoothSwitchChangeCallback?.invoke(true)
                } else if (blueState == BluetoothAdapter.STATE_OFF) {
                    Log.iF(logTag, "mBluetoothMonitorReceiver -> bluetooth is off.")
                    bluetoothSwitchChangeCallback?.invoke(false)
                }

            } else if (TextUtils.equals(action, BluetoothDevice.ACTION_ACL_CONNECTED)) {
                Log.iF(logTag, "mBluetoothMonitorReceiver -> Bluetooth device connected.")
            } else if (TextUtils.equals(action, BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
                Log.iF(logTag, "mBluetoothMonitorReceiver -> Bluetooth device disconnected.")
            }
        }
    }

    companion object {
        @Volatile
        private var instance: HemsBleUtil? = null

        @JvmStatic
        fun getInstance() =
            instance ?: synchronized(this) {
                instance ?: HemsBleUtil().also { instance = it }
            }
    }

    /**
     * 初始化
     */
    fun onInit(activity: ComponentActivity?) {
        Log.iF(logTag, "onInit()")
        if (null == activity) {
            return
        }
        activityReference = WeakReference<ComponentActivity>(activity)
        bleLauncher =
            activity.registerForActivityResult(StartActivityForResult(),
                ActivityResultCallback { result: ActivityResult ->
                    //该方法目前只在记录状态，没有逻辑
                    val resultCode = result.resultCode
                    Log.iF(
                        logTag,
                        "Return from the Bluetooth switch setting interface. resultCode = $resultCode"
                    )
                    if (resultCode != Activity.RESULT_OK) {
                        return@ActivityResultCallback
                    }
                    var switchStatus = false
                    if (null != mBluetoothAdapter) {
                        switchStatus = mBluetoothAdapter?.isEnabled == true
                    }
                    Log.iF(
                        logTag,
                        "bleLauncher->switchStatus = $switchStatus"
                    )
                })
    }

    /**
     * 销毁资源
     */
    fun onUnit() {
        try {
            Log.iF(logTag, "onUnit()")
            activityReference?.clear()
            preCheckCallbackOfBluetoothStatus = null

            if (null != disposableOfPermissions && disposableOfPermissions!!.isDisposed) {
                disposableOfPermissions?.dispose()
                disposableOfPermissions = null
            }

            dismissTipDialog()
        } catch (e: Exception) {
            Log.eF(logTag, "HemsBleUtil onUnit() error!")
            e.printStackTrace()
        }
    }

    fun dismissTipDialog() {
        dismissBluePermissionFailureDialog()
    }

    /**
     * 注册蓝牙开关状态广播
     */
    fun registerBroadcastOfBluetoothSwitch() {
        getAttachedActivity()?.let {
            val intentFilter = IntentFilter()
            // 监视蓝牙关闭和打开的状态
            intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
            // 监视蓝牙设备与APP连接的状态
            intentFilter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED)
            intentFilter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED)
            it.registerReceiver(mBluetoothMonitorReceiver, intentFilter)
        }
    }

    /**
     * 注销蓝牙开关状态广播
     */
    fun unRegisterBroadcastOfBluetoothSwitch() {
        getAttachedActivity()?.unregisterReceiver(mBluetoothMonitorReceiver)
    }

    /**
     * 蓝牙状态预检
     * >检查蓝牙开关是否开启
     * >检查蓝牙权限是否开启
     */
    fun onPreflightBluetoothStatus() {
        if (!isSupportedBluetooth()) {
            Log.eF(logTag, "onPreflightBluetoothStatus()->Bluetooth not supported!")
            preCheckCallbackOfBluetoothStatus?.invoke(false)
            return
        }

        if (bluetoothIsOn()) {
            //蓝牙开启
            val attachedActivity = getAttachedActivity()
            if (null == attachedActivity) {
                Log.eF(logTag, "onPreflightBluetoothStatus()->Unbound context!")
                preCheckCallbackOfBluetoothStatus?.invoke(false)
                return
            }
            if (checkBluetoothPermission(attachedActivity)) {
                //蓝牙权限已获取
                Log.iF(
                    logTag,
                    "onPreflightBluetoothStatus()->checkBluePermission()->Congratulations, the Bluetooth status pre-check passed."
                )
                preCheckCallbackOfBluetoothStatus?.invoke(true)
                return
            }

            //蓝牙权限未获取
            requestBluetoothPermission {
                if (!it) {
                    Log.eF(
                        logTag,
                        "onPreflightBluetoothStatus()->Failed to obtain bluetooth permission!"
                    )
                    showBluePermissionFailureDialog()
                    return@requestBluetoothPermission
                }

                Log.iF(
                    logTag,
                    "onPreflightBluetoothStatus()->requestBluetoothPermission()->Congratulations, the Bluetooth status pre-check passed."
                )
                preCheckCallbackOfBluetoothStatus?.invoke(true)
            }
            return
        }

        //蓝牙未开启
        requestBluetoothPermission {
            if (!it) {
                //未申请到权限打开设置-蓝牙
                Log.eF(
                    logTag,
                    "onPreflightBluetoothStatus()->Do not agree to set the bluetooth switch!"
                )
                showBluePermissionFailureDialog()
                return@requestBluetoothPermission
            }

            //跳转到设置打开蓝牙
            if (null == bleLauncher) {
                Log.eF(
                    logTag,
                    "onPreflightBluetoothStatus()->Setting the bluetooth switch jumps abnormally!"
                )
                preCheckCallbackOfBluetoothStatus?.invoke(false)
                return@requestBluetoothPermission
            }
            onJumpTurnOnBluetoothSwitch()
        }
    }

    /**
     * 获取绑定的Activity
     */
    private fun getAttachedActivity(): Activity? {
        val activity = activityReference?.get()
        if (null != activity) {
            return activity
        }
        return ApActivityTool.currentActivity()
    }

    private fun getString(resId: Int): String {
        var value = ""
        getAttachedActivity()?.let {
            value = it.resources.getString(resId)
        }
        return value
    }


    /**
     * 检查蓝牙权限
     */
    private fun checkBluetoothPermission(context: Context): Boolean {
        return if (SdkUtils.isOverAndroid12()) {
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_CONNECT
            ) == PackageManager.PERMISSION_GRANTED
                    && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_SCAN
            ) == PackageManager.PERMISSION_GRANTED
                    && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_ADVERTISE
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH
            ) == PackageManager.PERMISSION_GRANTED
                    && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.BLUETOOTH_ADMIN
            ) == PackageManager.PERMISSION_GRANTED)
        }
    }

    /**
     * 跳转到设置-打开蓝牙(android12 ,蓝牙设置开关之前,需要申请权限)
     */
    private fun onJumpTurnOnBluetoothSwitch() {
        if (requestCode == requestCodeOfTurnOnBluetoothSwitch) {
            requestCode = -1
            Log.eF(
                logTag, "onJumpTurnOnBluetoothSwitch()->Turn on bluetooth option Negative"
            )
            preCheckCallbackOfBluetoothStatus?.invoke(false)
            return
        }
        //https://blog.csdn.net/make_progress/article/details/90605748
        //BluetoothAdapter.ACTION_REQUEST_ENABLE
        val intent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
        requestCode = requestCodeOfTurnOnBluetoothSwitch
        bleLauncher?.launch(intent)
    }

    /**
     * 跳转到设置-应用-申请蓝牙权限
     */
    private fun onJumpOpenBluetoothPermission() {
        if (requestCode == requestCodeOfApplyPermission) {
            requestCode = -1
            Log.eF(
                logTag,
                "onJumpOpenBluetoothPermission()->Failed to apply for Bluetooth permission!"
            )
            preCheckCallbackOfBluetoothStatus?.invoke(false)
            return
        }

        getAttachedActivity().let {
            val permissionPageUtils = PermissionPageUtils(it)
            requestCode = requestCodeOfApplyPermission
            permissionPageUtils.jumpPermissionPage()
        }
    }

    /**
     * 判断设备是否支持蓝牙
     */
    private fun isSupportedBluetooth(): Boolean {
        if (null == getAttachedActivity()) {
            Log.eF(logTag, "isSupportedBluetooth()->Unbound context")
            return false
        }

        // Use this check to determine whether BLE is supported on the device.  Then you can
        // selectively disable BLE-related features.
        if (!getAttachedActivity()!!.packageManager.hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            Log.eF(logTag, "BLE is not supported.")
            return false
        }

        // Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to
        // BluetoothAdapter through BluetoothManager.
        val bluetoothManager =
            getAttachedActivity()!!.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        mBluetoothAdapter = bluetoothManager.adapter

        // Checks if Bluetooth is supported on the device.
        if (mBluetoothAdapter == null) {
            Log.eF(logTag, "Bluetooth not supported.")
            return false
        }
        return true
    }

    /**
     * 判断蓝牙是否开启
     */
    private fun bluetoothIsOn(): Boolean {
        return mBluetoothAdapter?.isEnabled == true
    }

    /**
     * 请求蓝牙权限
     */
    private fun requestBluetoothPermission(resultCallback: ((Boolean) -> Unit)?) {
        Log.iF(logTag, "requestBluePermission()")
        if (isShowingOfBluePermissionFailureDialog()) {
            Log.iF(logTag, "requestBluetoothPermission()->applyPermissionDialog is showing.")
            return
        }

        val rxPermissions: RxPermissions = getRxPermissions() ?: return

        if (null != disposableOfPermissions && disposableOfPermissions?.isDisposed == true) {
            disposableOfPermissions?.dispose()
        }

        disposableOfPermissions = if (SdkUtils.isOverAndroid12()) {
            rxPermissions.request(
                Manifest.permission.BLUETOOTH_CONNECT,
                Manifest.permission.BLUETOOTH_SCAN,
                Manifest.permission.BLUETOOTH_ADVERTISE
            ).subscribe { granted: Boolean ->
                Log.iF(logTag, "requestBluePermission() result = $granted")
                resultCallback?.invoke(granted)
            }
        } else {
            rxPermissions.request(
                Manifest.permission.BLUETOOTH,
                Manifest.permission.BLUETOOTH_ADMIN
            ).subscribe { granted: Boolean ->
                Log.iF(logTag, "requestBluePermission() result = $granted")
                resultCallback?.invoke(granted)
            }
        }
    }

    private fun getRxPermissions(): RxPermissions? {
        if (rxPermissions != null) {
            return rxPermissions
        }
        getAttachedActivity()?.let {
            rxPermissions = RxPermissions(it)
        }
        return rxPermissions
    }

    /**
     * 蓝牙权限获取失败弹窗
     */
    private fun showBluePermissionFailureDialog() {
        Log.iF(logTag, "showBluePermissionFailureDialog()")

        if (null == getAttachedActivity()) {
            Log.eF(logTag, "showBluePermissionFailureDialog()->Unbound context!")
            preCheckCallbackOfBluetoothStatus?.invoke(false)
            return
        }

        getAttachedActivity()?.let {
            if (isShowingOfBluePermissionFailureDialog()) {
                Log.iF(logTag, "applyPermissionDialog is showing.")
                return
            }
            applyPermissionDialog = CommonDialog(it)
            applyPermissionDialog!!.setTitle(getString(R.string.hint))
                .setContent(getString(R.string.gotoSet_BlueToothPermissions))
                .setCancelOnTouchOutside(true)
                .setCancelWithBack(true)
                .setLocationView(CommonDialog.LocationView.CENTER)
                .setOkText(getString(R.string.ok))
                .setCancelListener { dialog: CommonDialog ->
                    dialog.dismiss()
                    Log.eF(logTag, "showBluePermissionFailureDialog()->click cancel button!")
                    preCheckCallbackOfBluetoothStatus?.invoke(false)
                }
                .setOkListener { dialog: CommonDialog ->
                    dialog.dismiss()
                    onJumpOpenBluetoothPermission()
                }
                .show()
        }
    }

    private fun isShowingOfBluePermissionFailureDialog(): Boolean {
        return applyPermissionDialog?.isShowing == true
    }

    private fun dismissBluePermissionFailureDialog() {
        if (isShowingOfBluePermissionFailureDialog()) {
            applyPermissionDialog?.dismiss()
            applyPermissionDialog = null
        }
    }
}
